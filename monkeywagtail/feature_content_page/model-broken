from django.db import models
from wagtail.wagtailcore.models import Page, Orderable
from wagtail.wagtailimages.edit_handlers import ImageChooserPanel
from wagtail.wagtailcore.fields import StreamField
from wagtail.wagtailsnippets.edit_handlers import SnippetChooserPanel
from modelcluster.fields import ParentalKey
from wagtail.wagtailsearch import index
from wagtail.wagtailadmin.edit_handlers import FieldPanel, StreamFieldPanel, InlinePanel
from monkeywagtail.core.blocks import StandardBlock


class FeatureContentPageArtistGroup(models.Model):
    page = ParentalKey(
        'features.FeatureContentPage',
        related_name="artist_relationship"
    )
    artist_name = models.ForeignKey(
        'artist.Artist',
        related_name='artist_relationship'
    )
    panels = [
        FieldPanel('artist_name')
    ]
    is_abstract = True
    
    class Meta:
        abstract = True


class FeatureContentPage(Page):
    """
    This is a feature content page for all of your interviews, news etc.
    """

#    @property
#    def artist_groups_list(self):
#        artist_groups = [
#            artist.artist_group for artist in self.artist_groups.select_related(
#                'artist'
#            ) if artist.artist_group.live
#        ]
#        return artist_groups


    @property
    def artist_names(self):
        artist_names = [
            n.artist_name for n in self.artist_relationship.all()
        ]
        return artist_names


#class FeatureContentPageArtistGroup(Orderable, models.Model):
    # Okay... this is bringing in the content from the artist class within the artist model
    # but it hits an error immediately where TypeError: issubclass() arg 1 must be a class
    # http://www.tivix.com/blog/working-wagtail-i-want-my-m2ms/
#    page = ParentalKey(FeatureContentPage,
#                       related_name='artist_groups')
#    artist_groups = models.ForeignKey(
#        'FeatureContentPage.artist_groups_list',
#        null=True,
#        blank=True,
#        on_delete=models.SET_NULL,
#        related_name='artist_groups'
#    )
#    is_abstract = True
    
#    class Meta:
#        abstract = True

    content_panels = Page.content_panels + [
        # The content panels are displaying the components of content we defined in the StandardPage class above
        # If you add something to the class and want it to appear for the editor you have to define it here too
        # A full list of the panel types you can use is at http://docs.wagtail.io/en/latest/reference/pages/panels.html
        # If you add a different type of panel ensure you've imported it from wagtail.wagtailadmin.edit_handlers in
        # in the `From` statements at the top of the model
        # InlinePanel(artist_groups, 'artist_groups', label="Artist(s)"),
        InlinePanel(
            'artist_relationship',
            label="Principal Investigators"
        )
    ]
